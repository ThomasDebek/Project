== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.




9. Gem Semantic - Media_queries
 Chodzi nam aby nasz projekt nad którym pracujemy byl wpelni responsywny
 Tak ze wielu miejscach mojej strony mamy kolumny a chcemy zeby byly zwijane do jednej
 I do tego uzyjemy bibloteki media

 Chodzi mi o latwe stworzenie siatki kolumn
 Skorzystamy z bibloteki semantic.gs  =  ale my korzystamy z GEMA SEMANTIC z ruby gems   https://rubygems.org/gems/semantic

 Oraz z githuba kochanego
 https://github.com/tylertate/semantic.gs/blob/master/stylesheets/scss/grid.scss

 Tworzymy nowy plik o nazwie grid.scss i wklejmay do niego klika danych :) naturalnie z githuba
 I podpinamy go w naszej apce czyli application.css.scss



 10. Tworzymy MENU - RESPONSYWNE DLA wielu użądzen
 - uzywamy: http://slicknav.com/ (pobieramy z niego pliki) i wklejmay do
   : stylesheets/slick
   core.scss
   slicknav.scss
   theme.scss
   oraz
   : javascript
   jquery.slicknav.min.js
   : a w laytusie wklejamy siezke <script src="../../assets/javascripts/jquery.slicknav.min.js"></script>
   : oraz piszemy skrypt dla naszego menu

   <script>
     $(document).ready(function(){
       /* menu mobilne */
       $('#main-menu').slicknav({
         prependTo: '#attach-mobile-menu',
         label: ''                           /* label: ''  USOWAMY NAPIS MENU Z ETYKITY */
       });
     });
   </script>


   Dodajemy takze style: w styles.scss
   // Ukrywamy elementy MENU
   #main-menu {
     @include invisible;
     @media #{$tablet} {
       @include block;
     }
   }

   // menu mobilne
   .slicknav_menu {
     position: fixed;
     left: 0;
     right: 0;
     @media #{$phone} {
       @include invisible;
     }
     i {
      @include invisible;
     }
     ul {
       @include section-border-bottom;
       box-shadow: 0 0 1px $basic-border-color;
     }
   }




 15.bxSlider_glowny_slider_na_stronie
 Uzyjemy teraz jqery - a dokladniej bxslider.com
- jest responsywny
- mozna go skonfigurowac na wiele róznych mozliwosci
- uzyjemy go w czesci górnej i czesci dolnej (uzyjemy go do przesówania w poziomie i pionie)
- ale my uzyjemy GEMA https://rubygems.org/gems/bxslider-rails   GEM GEM GEM GEM bxslider-rails
* Dodajmey gem z rubygems i postepujemy wdg.dokumentacji

- nastepnie podpinamy nasza klase - w naszym przypadku id
<script>
	$(document).ready(function(){
		/* glowny slider */
		$('#main-slider').bxSlider();
	});
</script>


- W kolejnym etapie naszego slidera zrobimy:
* przenikanie sie slajdow
* usuniemy paginacje - te kontroli ponizej slidera
* dodamy automatyczne przewijanie slajdow i wykorzystamy te ze strony http://bxslider.com/options


w naszym skrypcie dodamy kilka klas
$('#main-slider').bxSlider({
			mode: 'fade',
			auto: true,
			controls: true,
			pager: false
		});

 No newline at end of file
